const VOR_CELLDRAW_BOUNDED=1;const VOR_CELLDRAW_CENTER=2;const VOR_CELLDRAW_SITE=3;(function(){var imgWidth;var imgHeight;var voronoiDiagram;var sites=[];var cells=[];var notFirst=!1;var nRandoms;var randomMinimumDist=0;var voronoiObj=new Voronoi();var cellColors=[];var cellStrokeWeight=1;var cellStroke=0;var siteStrokeWeight=3;var siteStroke=0;var drawSites=!0;var jitterStepMax=20;var jitterStepMin=5;var jitterFactor=3;var jitterBorderFlag=!1;var jitterCells=[];p5.prototype.voronoiCellStrokeWeight=function(w){if(w>=0)
cellStrokeWeight=w}
p5.prototype.voronoiSiteStrokeWeight=function(w){if(w>=0)
siteStrokeWeight=w}
p5.prototype.voronoiCellStroke=function(c){cellStroke=c}
p5.prototype.voronoiSiteStroke=function(c){siteStroke=c}
p5.prototype.voronoiSiteFlag=function(b){drawSites=b}
p5.prototype.voronoiRndSites=function(n,newMinimum){nRandoms=n;if(newMinimum!==undefined)
randomMinimumDist=newMinimum}
p5.prototype.voronoiRndMinDist=function(newMinimum){randomMinimumDist=newMinimum}
p5.prototype.voronoiSites=function(newSites){for(var i=0;i<newSites.length;i++){sites.push({x:newSites[i][0],y:newSites[i][1]});if(newSites[i][2]!==undefined)
cellColors.push([newSites[i][0],newSites[i][1],newSites[i][2]]);else cellColors.push([newSites[i][0],newSites[i][1],color(random(0,255),random(0,255),random(0,255))])}}
p5.prototype.voronoiSite=function(nx,ny,nColor){sites.push({x:nx,y:ny});if(nColor!==undefined)
cellColors.push([nx,ny,nColor]);else cellColors.push([nx,ny,color(random(0,255),random(0,255),random(0,255))])}
p5.prototype.voronoiRemoveSite=function(dx,dy){if(dy===undefined){sites.splice(dx,1)}else{for(var i=0;i<sites.length;i++){if(sites[i].x==dx&&sites[i].y==dy){sites.splice(i,1);return}}}}
p5.prototype.voronoiClearSites=function(){cellColors=[];sites=[]}
p5.prototype.voronoiGetSite=function(x,y,jitter=!1){var target=cells;if(jitter){if(jitterCells.length!==0){target=jitterCells}}
for(var i=0;i<target.length;i++){if(raycast([x,y],target[i]))
return i}}
function raycast(point,vs){var x=point[0],y=point[1];var inside=!1;for(var i=0,j=vs.length-1;i<vs.length;j=i++){var xi=vs[i][0],yi=vs[i][1];var xj=vs[j][0],yj=vs[j][1];var intersect=((yi>y)!=(yj>y))&&(x<(xj-xi)*(y-yi)/(yj-yi)+xi);if(intersect){inside=!inside}}
return inside};p5.prototype.voronoi=function(width,height,jitterFlag=!1){voronoiObj.recycle(voronoiDiagram);if(notFirst)
sites.splice(sites.length-nRandoms,nRandoms);imgWidth=width;imgHeight=height;setRandoms(width,height);voronoiDiagram=voronoiObj.compute(sites,{xl:0,xr:width,yt:0,yb:height});simplifyCells();jitterCells=[];if(jitterFlag)
jitter();if(!notFirst)
notFirst=!0}
function simplifyCells(){cells=[];for(var i=0;i<voronoiDiagram.cells.length;i++){var vertices=[];for(var j=0;j<voronoiDiagram.cells[i].halfedges.length;j++){vertices.push([voronoiDiagram.cells[i].halfedges[j].getStartpoint().x,voronoiDiagram.cells[i].halfedges[j].getStartpoint().y])}
cells.push(vertices)}}
function setRandoms(width,height){for(var i=0;i<nRandoms;i++){var flag;var nX=round(random(0,width));var nY=round(random(0,height));var triesLimit=500;var tries=0;if(randomMinimumDist>0){do{flag=!1;nX=round(random(0,width));nY=round(random(0,height));for(var j=0;j<sites.length;j++){if(dist2D(nX,nY,sites[j].x,sites[j].y)<randomMinimumDist)
flag=!0}
tries++}while(flag==!0&&tries<=triesLimit)}
sites.push({x:nX,y:nY});cellColors.push([nX,nY,color(random(0,255),random(0,255),random(0,255))]);if(tries>=triesLimit)
console.log("Warning: setRandoms tries limit reached: minimum distance("+randomMinimumDist+") not ensured")}}
function dist2D(ix,iy,fx,fy){return(sqrt(sq(ix-fx)+sq(iy-fy)))}
p5.prototype.voronoiNeighbors=function(id){if(id>=voronoiDiagram.cells.length||id===undefined)
return;var allNeighbors=[];for(var i=0;i<voronoiDiagram.cells[id].halfedges.length;i++){if(voronoiDiagram.cells[id].halfedges[i].edge.rSite!==null)
allNeighbors.push(voronoiDiagram.cells[id].halfedges[i].edge.rSite.voronoiId);allNeighbors.push(voronoiDiagram.cells[id].halfedges[i].edge.lSite.voronoiId)}
var uniqueNeighbors=removeDuplicates(allNeighbors);for(var i=0;i<uniqueNeighbors.length;i++){if(uniqueNeighbors[i]==id){uniqueNeighbors.splice(i,1);break}}
return uniqueNeighbors}
function removeDuplicates(arr){let unique_array=[]
for(let i=0;i<arr.length;i++){if(unique_array.indexOf(arr[i])==-1){unique_array.push(arr[i])}}
return unique_array}
p5.prototype.voronoiDrawCell=function(x,y,id,type,fill=!0,jitter=!1){if(id>=voronoiDiagram.cells.length||id===undefined)
return;var halfedges=voronoiDiagram.cells[id].halfedges;var siteX=voronoiDiagram.cells[id].site.x;var siteY=voronoiDiagram.cells[id].site.y;push();setFillColorCell(id);if(!fill)
noFill();if(type==VOR_CELLDRAW_BOUNDED){drawCellBounded(x,y,id,siteX,siteY,jitter)}else if(type==VOR_CELLDRAW_CENTER){drawCellCenter(x,y,id,siteX,siteY,jitter)}else if(type==VOR_CELLDRAW_SITE){drawCellSite(x,y,id,siteX,siteY,jitter)}}
function drawCellBounded(x,y,id,siteX,siteY,jitter){var target=cells;if(jitter){if(jitterCells.length!==0){target=jitterCells}}
strokeWeight(cellStrokeWeight);stroke(cellStroke);let minX=Number.MAX_VALUE;let minY=Number.MAX_VALUE;for(var i=0;i<target[id].length;i++){if(target[id][i][0]<minX)
minX=target[id][i][0];if(target[id][i][1]<minY)
minY=target[id][i][1]}
beginShape();for(var i=0;i<target[id].length;i++){vertex(target[id][i][0]-minX+x,target[id][i][1]-minY+y)}
endShape(CLOSE);if(drawSites){strokeWeight(siteStrokeWeight);stroke(siteStroke);point(siteX-minX+x,siteY-minY+y)}
pop()}
function drawCellCenter(x,y,id,siteX,siteY,jitter){var target=cells;if(jitter){if(jitterCells.length!==0){target=jitterCells}}
strokeWeight(cellStrokeWeight);stroke(cellStroke);let minX=Number.MAX_VALUE;let minY=Number.MAX_VALUE;let maxX=0;let maxY=0;for(var i=0;i<target[id].length;i++){if(target[id][i][0]<minX)
minX=target[id][i][0];if(target[id][i][1]<minY)
minY=target[id][i][1];if(target[id][i][0]>maxX)
maxX=target[id][i][0];if(target[id][i][1]>maxY)
maxY=target[id][i][1]}
let dX=maxX-minX;let dY=maxY-minY;beginShape();for(var i=0;i<target[id].length;i++){vertex(target[id][i][0]-minX+x-dX/2,target[id][i][1]-minY+y-dY/2)}
endShape(CLOSE);if(drawSites){strokeWeight(siteStrokeWeight);stroke(siteStroke);point(siteX-minX+x-dX/2,siteY-minY+y-dY/2)}
pop()}
function drawCellSite(x,y,id,siteX,siteY,jitter){var target=cells;if(jitter){if(jitterCells.length!==0){target=jitterCells}}
strokeWeight(cellStrokeWeight);stroke(cellStroke);let minX=Number.MAX_VALUE;let minY=Number.MAX_VALUE;for(var i=0;i<target[id].length;i++){if(target[id][i][0]<minX)
minX=target[id][i][0];if(target[id][i][1]<minY)
minY=target[id][i][1]}
beginShape();for(var i=0;i<target[id].length;i++){vertex(target[id][i][0]-minX+x-(siteX-minX),target[id][i][1]-minY+y-(siteY-minY))}
endShape(CLOSE);if(drawSites){strokeWeight(siteStrokeWeight);stroke(siteStroke);point(siteX-minX+x-(siteX-minX),siteY-minY+y-(siteY-minY))}
pop()}
p5.prototype.voronoiDraw=function(x,y,fill=!0,jitter=!1){var target=cells;if(jitter){if(jitterCells.length!==0){target=jitterCells}}
push();if(!fill)
noFill();for(var i=0;i<target.length;i++){strokeWeight(cellStrokeWeight);stroke(cellStroke);if(fill)
setFillColorCell(i);beginShape();for(var j=0;j<target[i].length;j++){vertex(target[i][j][0]+x,target[i][j][1]+y)}
endShape(CLOSE);if(drawSites){strokeWeight(siteStrokeWeight);stroke(siteStroke);let sX=x+voronoiDiagram.cells[i].site.x;let sY=y+voronoiDiagram.cells[i].site.y;point(sX,sY)}}
pop()}
function setFillColorCell(cellId){for(var c=0;c<cellColors.length;c++){if(cellColors[c][0]==voronoiDiagram.cells[cellId].site.x&&cellColors[c][1]==voronoiDiagram.cells[cellId].site.y){fill(cellColors[c][2])}}}
p5.prototype.voronoiJitterStepMax=function(s){if(s>=0)
jitterStepMax=s}
p5.prototype.voronoiJitterStepMin=function(s){if(s>=0)
jitterStepMin=s}
p5.prototype.voronoiJitterFactor=function(f){jitterStep=f}
p5.prototype.voronoiJitterBorder=function(f){jitterBorderFlag=f}
function jitter(){var edgeMemory=[];for(var i=0;i<voronoiDiagram.cells.length;i++){var vertices=[];for(var j=0;j<voronoiDiagram.cells[i].halfedges.length;j++){const edge=voronoiDiagram.cells[i].halfedges[j];if(!jitterBorderFlag){if((round(edge.getStartpoint().x)==0&&(round(edge.getEndpoint().x)==0))||(round(edge.getStartpoint().y)==0&&(round(edge.getEndpoint().y)==0))||(round(edge.getStartpoint().x)==imgWidth&&(round(edge.getEndpoint().x)==imgWidth))||(round(edge.getStartpoint().y)==imgHeight&&(round(edge.getEndpoint().y)==imgHeight))){vertices.push([edge.getStartpoint().x,edge.getStartpoint().y]);continue}}
var found=!1;var id=0;for(var e=0;e<edgeMemory.length;e++){if(edgeMemory[e][0].getEndpoint()===edge.getStartpoint()&&edgeMemory[e][0].getStartpoint()===edge.getEndpoint()){found=!0;id=e;break}}
if(found){for(var e=edgeMemory[id][1].length-1;e>0;e--){vertices.push(edgeMemory[id][1][e])}}
else{jitterEdge(vertices,edge,edgeMemory)}}
jitterCells.push(vertices)}}
function jitterEdge(vertices,edge,edgeMemory){memEdge=[];const dX=edge.getEndpoint().x-edge.getStartpoint().x;const dY=edge.getEndpoint().y-edge.getStartpoint().y;const delta=createVector(dX,dY);const deltaNorm=delta.copy();deltaNorm.normalize();const deltaMag=delta.mag();const perpendicularNorm=deltaNorm.copy();perpendicularNorm.rotate(HALF_PI);let start=createVector(edge.getStartpoint().x,edge.getStartpoint().y);let pos=start.copy();let jitterVal=0;vertices.push([start.x,start.y]);memEdge.push([start.x,start.y]);var total=random(jitterStepMin,jitterStepMax+1);while(total<deltaMag){pos=p5.Vector.add(start,p5.Vector.mult(deltaNorm,total));jitterVal=(random(0,201)-100)/100;jitterVal*=jitterFactor;pos.add(p5.Vector.mult(perpendicularNorm,jitterVal));vertices.push([pos.x,pos.y]);memEdge.push([pos.x,pos.y]);total+=random(jitterStepMin,jitterStepMax+1)}
memEdge.push([edge.getEndpoint().x,edge.getEndpoint().y]);edgeMemory.push([edge,memEdge])}})()